#!/bin/bash

set -Eeou pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
  cat <<EOF
Usage: $(basename "${BASH_SOURCE[0]}") [OPTIONS] COMMAND

Bash CLI-spinner

Options:
-h, --help            Print this help and exit
--logfile  string     Name of LOGFILE that spinner check
--log_done string     Line in LOGFILE that means done
--log_fail string     Line in LOGFILE that means fail
--msg_done string     Message after [DONE] spin
--msg_fail string     Message after [FAIL] spin
--no-color            No color in spinner output

Command:
run                   Run spinner
EOF
  exit 1
}

## Defaults
LOGFILE=/tmp/spinnerlog
LOG_DONE="DONE_spinner"
LOG_FAIL="FAIL_spinner"
MSG_FAIL=''
MSG_DONE=''
NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''

## Constants
SPINPAUSE=0.2

## Global vars
LOGSIZE=0
LINELEN=0

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # script cleanup here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  # default values of variables set from params
  local flag_str=0

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    --no-color) NO_COLOR=1 ;;
    --logfile)
      local path="${2-}"
      [[ $path =~ ^\/ ]] || die "Please enter absolute Path: $path"
      if [[ -f $path ]]; then
        LOGFILE=$path
      else
        die "No Logfile: $path"
      fi
      shift
      ;;
    --log_done)
      local log_done="${2-}"
      if [[ $log_done =~ '^-' ]]; then
        die "LOG_DONE must be without '-' at the beginning"
      else
        LOG_DONE=$log_done
      fi
      shift
      ;;
    --log_fail)
      local log_fail="${2-}"
      if [[ $log_fail =~ '^-' ]]; then
        die "LOG_FAIL must be without '-' at the beginning"
      else
        LOG_FAIL=$log_fail
      fi
      shift
      ;;
    --msg_done)
      local msg_done="${2-}"
      if [[ $msg_done =~ '^-' ]]; then
        die "MSG_DONE must be without '-' at the beginning"
      else
        MSG_DONE=$msg_done
      fi
      shift
      ;;
    --msg_fail)
      local msg_fail="${2-}"
      if [[ $msg_fail =~ '^-' ]]; then
        die "MSG_FAIL must be without '-' at the beginning"
      else
        MSG_FAIL=$msg_fail
      fi
      shift
      ;;
    run) break ;;
    -?*) die "Unknown option: $1" ;;
    ?*) echo "Unknown command: $1" ; usage ;;
    *) echo "Missed command!" ; echo ; usage ;;
    esac
    shift
  done

  return 0
}

function free_prev_line() {
  local line="$1"
  local len=$LINELEN-${#line}
  while [[ $len -gt 0 ]]; do
    echo -n " "
    let len--
  done
  LINELEN=${#line}
}

function check_last_line() {
  local arg="$1"
  local line=""
  local msg=""

  if [[ "$arg" == "$LOG_DONE" ]]; then
    msg="${MSG_DONE}"
    line="\r${SPIN_DONE}  ${msg}"
  elif [[ "$arg" == "$LOG_FAIL" ]]; then
    msg="${MSG_FAIL}"
    line="\r${SPIN_FAIL}  ${msg}"
  fi

  if [[ ${#line} -ne 0 ]]; then
    echo -ne "$line"
    free_prev_line "$msg"
    echo
    exit
  fi
}

function logout_last_line() {
  local line=$(tail -n 1 $LOGFILE 2>/dev/null)
  if [[ "$line" ]]; then
    echo -n " $line"
    free_prev_line "$line"
  fi
  
  check_last_line $line
}

function out_spin() {
  local spin="$1"
  if [[ -f $LOGFILE ]]; then

    echo -ne "\r$spin"
    sleep $SPINPAUSE

    local size=$(stat --printf "%s" $LOGFILE 2>/dev/null)
    if [[ $size -gt $LOGSIZE ]]; then
      logout_last_line
      LOGSIZE=$size
    fi
  fi
}

parse_params "$@"
setup_colors

## Spins
SPIN[0]='[ ðŸ‘‰  ðŸ‘Œ ]'
SPIN[1]='[  ðŸ‘‰ðŸ‘Œ  ]'
SPIN_DONE="[ðŸ’¦ ${GREEN}DONE${NOFORMAT}]"
SPIN_FAIL="[ðŸ¤¬ ${RED}FAIL${NOFORMAT}]"

while [[ -f $LOGFILE ]]; do
  for i in "${SPIN[@]}"; do
    out_spin "$i"
  done
done
